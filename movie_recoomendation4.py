# -*- coding: utf-8 -*-
"""movie recoomendation4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11QEUkN6OKz6rrDQ4nGwzjXbOzK5yB5hg
"""

import numpy as numpy
import pandas as pd
import difflib #get the name of movie from the user and reccomend based on the movies
from sklearn.feature_extraction.text import TfidfVectorizer#which movie closes to the user input
#textual data into numerical values means feature vector
from sklearn.metrics.pairwise import cosine_similarity
#the similarity score from all the movie by using cosine similarity compare with the other movie

"""Data Collection and Pre-processing

"""

#loading the data from csv file to a pandas dataframe
movies_data=pd.read_csv('/content/movies.csv')

#load the first five data to look the data attributes of the data frame
movies_data.head()

#number of rows and column in the data frame
 movies_data.shape

#selecting the relevent features for recommendation
#chose particular set of movies
#content based and popularity based recommend system

selected_features=['genres','keywords','tagline','cast','director']
print(selected_features)

#Pre placing the mising and null values with null string 
# first iterate with genres and fill missing values with null string and then iterate with the second iteratein
for feature in selected_features:
  movies_data[feature]=movies_data[feature].fillna('')

#combining all the 5 selectyedd features 
combined_features=movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)
#combining allt he textual data

#combining all the textual data into numerical data
vectorizer=TfidfVectorizer()

feature_vector=vectorizer.fit_transform(combined_features)
print(feature_vector)



"""cosine similarity

"""

#getting the similarity score using cosine similarity
similarity=cosine_similarity(feature_vector)

print(similarity)

print(similarity.shape)

#getting the movie name from the user
movie_name=input('enter the favoorite movie name: ')

#creating the list with all the movie name given in the dataset
list_of_all_titles=movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match for the movie name given by the user 
find_close_match=difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_close_match)

#i dont want the three only wanted to 1
#most relevent one
close_match=find_close_match[0]
print(close_match)

#finding he index of the movie with the title
 #which particular index of the iron man
 #what is the index of the movie
index_of_the_movie=movies_data[movies_data.title==close_match]['index'].values[0]
print(index_of_the_movie)

#getting the list of similar movies
similarity_score=list(enumerate(similarity[index_of_the_movie]))
#geting the similarity score with all the movie with the colose match
print(similarity_score)
# similarity betweent the movie withe iron man movie
# similarity between iron man movie with avatR is 0.03....

len(similarity_score)

#sorting the movies based on their similarity score
sorted_similar_movies=sorted(similarity_score,key=lambda x:x[1],reverse=True)
print(sorted_similar_movies)

#print the name of similar of the movie based on the index
print('Movies suggested for you: \n')

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1